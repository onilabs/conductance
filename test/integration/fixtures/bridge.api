var { integers, Stream } = require('sjs:sequence');
var { clone } = require('sjs:object');
var { setStatus } = require('mho:server/response');
var logging = require('sjs:logging');
var { ObservableVar } = require('sjs:observable');
var bridge = require('mho:rpc/bridge');
var sys = require('sjs:sys');

exports.throwError = function(msg) { throw new Error(msg); }

exports.callme = function(f) { return f(); }
exports.identity = x -> x;

exports.hold = function() { hold(); }
exports.id = module.id;
exports.throwOnCancellation = function(msg, delay) {
  try {
    hold();
  } retract {
    if(delay) hold(delay);
    throw new Error(msg);
  }
}

var transport = function() {
  if (!exports._transport)
    throw new Error("Test harness error: exports._transport not set by server config");
  return exports._transport;
}

exports.destroyConnection = function(timeout) {
  var t = transport();
  sys.spawn(function() {
    hold(timeout);
    logging.info("bridge.api: destroying connection");
    t.__finally__();
  });
}

var sharedVariable;
exports.withSharedVariable = function(block) {
  try {
    sharedVariable = ObservableVar();
    block(sharedVariable);
  } finally {
    sharedVariable = null;
  }
};
exports.sharedVariable = -> sharedVariable;
exports.integers = integers;

exports.ping = -> "pong";
exports.hostenv = -> require('sjs:sys').hostenv;


var retractionDetected;
exports.detectRetractionAfterDelay = function(delay){
  retractionDetected = false;
  try {
    hold(delay);
  } retract {
    retractionDetected = true; 
  }
}
exports.didDetectRetraction = -> retractionDetected;

var errorThrown;
exports.checkErrorThrownOnCallingFuncAfterDelay = function(func, delay){
  errorThrown = false;
  function caller(){
    hold(delay);
    try{
      var rv = func()
    }catch(e){
      if(!bridge.isTransportError(e)) throw e;
      errorThrown = true;
    }
  }
  sys.spawn(caller);
}
exports.wasErrorThrown = -> errorThrown;

var CustomProto = {};
exports.unmarshallCustomObject = function(text) {
  var rv = Object.create(CustomProto);
  rv.text = text;
  return rv;
};

exports.buggyUnmarshaller = function(text) {
  throw new Error("This unmarshaller intentionally left broken");
};

exports.isCustomObject = function(o) {
  return CustomProto.isPrototypeOf(o);
};

exports.returnCustomObject = function(orig, wrapRemote) {
  var obj = orig .. clone();
  obj .. bridge.setMarshallingDescriptor({
    wrapLocal: _ -> orig,
    wrapRemote: wrapRemote,
  });
  return obj;
};

exports.slowIntegers = function(waitTime) {
  return Stream(function(emit) {
    var i=0;
    while(true) {
      emit(i);
      hold(waitTime);
      i++;
    }
  });
}

exports.integer_stream = Stream(function(r) {
  var i=0;
  while (1) { r(i++); }
});

exports.blocking_finally = function(finalizer, block) { 
  try {
    block();
  }
  retract {
    throw new Error('THIS RETRACT ON THE SERVER SHOULD NOT BE CALLED');
  }
  finally {
    hold(10);
    finalizer();
  }
};

exports.callAbortHold = function(f) { 
  waitfor {
    f();
  }
  or {
    hold(10);
  }
  hold();
};

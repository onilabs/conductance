#!/usr/bin/env conductance

@ = require([
  'mho:std',
  {id:'mho:commandline-utils', name:'commandline'},
  {id:'sjs:yaml', name:'yaml'}
]);

// helpers:

function emit(x) { process.stdout.write(x); }

// helpers for traversing objects
// XXX we should have something like this in sjs:object
function traverse(root, isLeaf, visit) {
  function inner(container) {
    container .. @propertyPairs .. @each {
      |[k,v]|
      if (isLeaf(container, k, v))
        visit(container, k, v);
      else if (v && typeof v === 'object')
        inner(v);
    }
  }
  inner(root);
}

function traverseRefs(obj, visit) {
  obj .. traverse((p,k,v) -> k === '$ref', visit);
}

function traverseAllOf(obj, visit) {
  obj .. traverse((p,k,v) -> k === 'allOf', visit);
}


//----------------------------------------------------------------------
// argument parsing

var args = @commandline.parseArgs(
  {
    summary: "Generate an sjs API file for the Docker API from an OpenAPI file",
    options: [{
      name: 'version',
      type: 'string',
      help: 'API version (default=v1.25). The utility expects an OpenAPI (swagger) file at https://docs.docker.com/engine/api/[VERSION]/swagger.yaml'
    }]
  }
);

if (!args.version) args.version = 'v1.25';

//----------------------------------------------------------------------
// load OpenAPI file & preprocess docs

var doc = @http.get(`https://docs.docker.com/engine/api/${args.version}/swagger.yaml`) .. @yaml.load;

// unravel references:
do {
  // make multiple passes in case referenced definitions contain references themselves
  var replacements = 0;
  process.stderr.write("Unravel references...\n");
  doc .. traverseRefs {
    |parent, name, val|
    var ref = val.split('/');
    if (ref[1] !== 'definitions') throw new Error("Unexpected reference #{val}");
    delete parent['$ref'];
    parent .. @extend(doc.definitions[ref[2]]);
    ++replacements;
  }
} while (replacements);

// merge 'allOf' data:
do {
  // make multiple passes in case allOf contains allOf data itself:
  var replacements = 0;
  process.stderr.write("Merge 'allOf' data...\n");
  doc .. traverseAllOf {
    |parent, name, val|
    var allOf = val;
    delete parent.allOf;
    if (allOf .. @any(item -> item.type && item.type !== 'object'))
      throw new Error("Unexpected OpenAPI structure: non-object children in 'allOf': #{allOf .. @inspect}");
    parent.type = 'object';
    if (allOf .. @any(item -> item.additionalProperties))
      throw new Error("Unexpected 'additionalProperties' in 'allOf'");
    
    // merge all properties into a new object:
    parent.properties= @merge.apply(null, allOf .. @map(item -> item.properties));
    ++replacements;
  }
} while (replacements);

//----------------------------------------------------------------------
// header

var rv = "\
// This file was originally generated using conductance/tools/docker/generate-docker-api --version=#{args.version}

/* (c) 2013-2017 Oni Labs, http://onilabs.com
 *
 * This file is part of Conductance.
 *
 * It is subject to the license terms in the LICENSE file
 * found in the top-level directory of this distribution.
 * No part of Conductance, including this file, may be
 * copied, modified, propagated, or distributed except
 * according to the terms contained in the LICENSE file.
 */

/**
  @summary #{doc.info.title} #{doc.info.version}
  @desc
#{doc.info.description .. @indent(4)}
*/

@ = require([
  'mho:std'
]);

";

//----------------------------------------------------------------------

var baseURL = doc.basePath;

var aux_classes = [];
var methods = [];

doc.paths .. @propertyPairs .. @each {
  |[path,path_descriptor]|

  path_descriptor .. @propertyPairs .. @each {
    |[method, method_descriptor]|
    methods.push(generateMethod(path, method, method_descriptor, aux_classes));
  }
}
rv = rv + "#{aux_classes.join('\n')}\n#{methods.join('\n')}\n";

// resolve relative links:
rv = rv.replace(/\[[^\]]+\]\(#operation\/([^\)]+)\)/g, (m,p1) -> "[::#{p1 .. @decapitalize}]");

// tweak display of lists following text 'Available filters:'
rv = rv.replace(/Available filters:\n/g, "Available filters:\n\n");

emit(rv);

           
//----------------------------------------------------------------------         
                    
function generateMethod(path, method, method_descriptor, aux_classes) { 
  var name = method_descriptor.operationId .. @decapitalize;
  
  var parameter_info = parseParameters(name, method_descriptor, aux_classes);
  var rv_info = parseResponses(name, method_descriptor, aux_classes);

  var body;

  var desc = '';
  if (method_descriptor.description) {
    desc += method_descriptor.description + '\n';
  }
  parameter_info .. @each {
    |par|

    if (par.in != 'path' && par.in != 'query' && par.in != 'body' && par.in != 'header') {
      process.stderr.write("#{name}::#{par.name} is in unhandled #{par.in}\n");
    }

    // XXX 
    if (par.in == 'body') {
      if (body) throw new Error("Unexpected: Multiple body parameters");
      if (par.schema.type === 'object' || par.schema.type === 'array') {
        body='json';
      }
      else if (par.schema.type === 'string') {
        body='string';
      }
      else {
        throw new Error("Unexpected body type #{par.schema.type} in #{name}::#{par.name}");
      }
    }

    if (par.desc) 
      desc += '\n' + par.desc + '\n';
  }

  if (rv_info.desc)
    desc += '\n#### Return value\n' + rv_info.desc + '\n';

  if (desc.length) 
    desc = "  @desc\n" + (desc .. @indent(4));



  return "\
/**
  @function #{name}
  @summary #{method_descriptor.summary}
  @return {#{rv_info.returns}}
#{generateParameterDocs(parameter_info)}
  @param {optional Function} [block] If this function is provided, it will receive the raw [IncomingMessage](https://nodejs.org/api/http.html#http_class_http_incomingmessage). The connection will automatically be destroyed when `block` exits.
#{desc}
*/
exports.#{name} = function(client, params, block) {
  return client.performRequest({
    method: '#{method.toUpperCase()}',
    url: '#{baseURL + path}',
    params: params,
    block: block,
    #{body ? "body: '#{body}',":''}
    requiredParams: [#{parameter_info .. @filter(p->p.required) .. @transform(p->"'#{p.name}'") .. @join(',')}],
    pathParams: [#{parameter_info .. @filter(p->p.in == 'path') .. @transform(p->"'#{p.name}'") .. @join(',')}],
    queryParams: [#{parameter_info .. @filter(p->p.in == 'query') .. @transform(p->"'#{p.name}'") .. @join(',')}],
    bodyParams: [#{parameter_info .. @filter(p->p.in == 'body') .. @transform(p->"'#{p.name}'") .. @join(',')}],
    headerParams: [#{parameter_info .. @filter(p->p.in == 'header') .. @transform(p->"'#{p.name}'") .. @join(',')}]
  });
};

";
}

//----------------------------------------------------------------------
// helpers to generate an inline textual description of a schema:

function SchemaTitle(schema, type) {
  var req = '';
  if (schema.required)
    req = " (Required: #{schema.required.join(', ')})";
  if (schema.default != undefined)
    req += " (Optional; default: '#{schema.default .. @inspect}')";

  if (schema.description)
    return '**'+type+'** ' + schema.description.replace(/\n/g,'  ') + req; // XXX this replacement is not very nice
  else 
    return '**'+type+'**' + req;
}

function schemaObjectProps(schema) {
  var rv = [];
  @propertyPairs(schema.properties) .. @each {
    |[k,v]|
    rv.push('- `'+k+'`: '+ schemaDescription(v));
  }

  if (schema.additionalProperties) 
    rv.push('- `[KEY]`: '+schemaDescription(schema.additionalProperties));

  return rv.join('\n') .. @indent(2);
}

function schemaDescription(schema) {
//  process.stderr.write("SCHEMA: #{schema .. @inspect(false, 4)}\n");
  var type = schema.type;
  if (Array.isArray(type)) {
    process.stderr.write("Warning, saw type '#{type}'.. taking first of those\n");
    type = type .. @first();
  }
  if (type === 'string')
    return SchemaTitle(schema,'String');
  else if (type === 'integer')
    return SchemaTitle(schema,'Integer');
  else if (type === 'number')
    return SchemaTitle(schema,'Number');
  else if (type === 'boolean')
    return SchemaTitle(schema,'Boolean');
  else if (type === 'array')
    return SchemaTitle(schema, 'Array') + '\n' + ('- Elements of type '+schemaDescription(schema.items)) .. @indent(2);
  else if (type === 'object' || (type === undefined && schema.properties) )
    return SchemaTitle(schema, 'Object') + '\n' + schemaObjectProps(schema);
  else if (type === 'object' || (type === undefined && schema.enum) ) {
    return SchemaTitle(schema,'String');
  }
  else if (type === undefined) {
    process.stderr.write("Warning: schema type undefined for schema #{schema .. @inspect}\n");
    return SchemaTitle(schema,'anything');
  }
  else
    throw new Error("Unknown schema type '#{type}' (schema = #{schema .. @inspect})");
}
//----------------------------------------------------------------------


function getSuccessSchema(method_descriptor) {
  return (@propertyPairs(method_descriptor.responses) .. @filter([k,v] -> k.substring(0,1) == '2') .. @first([{},{}]))[1].schema;
}

function parseResponses(name, method_descriptor, aux_classes) {
  try {
    var rv = {};
    if (method_descriptor.produces /*&& method_descriptor.produces .. @count === 1*/) {
      if (method_descriptor.produces.length > 1)
        process.stderr.write("Warning: #{name} has multiple response types (#{method_descriptor.produces.join(', ')}). Assuming the first one is the main one\n");
      if (method_descriptor.produces[0] === 'application/json') {
        var schema = getSuccessSchema(method_descriptor);
        if (schema) {
          rv.desc = "- "+schemaDescription(schema);
          rv.returns = 'Object';
        }
        else {
          rv.returns = 'UNDOCUMENTED';
        }
      }
      else if (method_descriptor.produces[0] === 'text/plain') {
        rv.returns = 'String';
      }
      else {
        process.stderr.write("#{name} has complex return type #{method_descriptor.produces[0]}\n");
        rv.returns = 'COMPLEX';
      }
    }
    else {
      // more complex return type :/
      var schema = getSuccessSchema(method_descriptor);
      if (schema) {
        // we've got a schema
        rv.desc = '- '+schemaDescription(schema);
        rv.returns = 'Object';
      }
      else {
        //process.stderr.write("#{name}: void reply assumed\n");
        rv.returns = 'void';
      }
    }
    return rv;
  }
  catch(e) {
    throw new Error("In #{name}: parseResponses: #{e}");
  }
}

function parseParameters(name, method_descriptor, aux_classes) {
  var rv = [];
  (method_descriptor.parameters || []) .. @each {
    |par_descriptor|
    var info = {};

    var summary = '';
    if (par_descriptor.description && par_descriptor.description.indexOf('\n') == -1) {
      // single line description
      summary =  par_descriptor.description;
    }
    else if (par_descriptor.description) {
      summary = "See description";
      info.desc = "#### Setting '#{par_descriptor.name}'\n#{par_descriptor.description}";
    }

    info.name = par_descriptor.name;
    info.required = par_descriptor.required;
    info.in = par_descriptor.in;

    if (par_descriptor.type) {
      // this is a 'simple' parameter

      info.docs = "  @setting {#{info.required ? '' : 'optional '}#{par_descriptor.type .. @capitalize}} [#{info.name}#{par_descriptor['default']!==undefined? "=#{par_descriptor.default}":''}] #{summary}";
    }
    else {
      // this parameter has a schema
      info.schema = par_descriptor.schema;
      info.docs = "  @setting {Object} [#{info.name}] #{par_descriptor.description ? par_descriptor.description+'. ' : ''}See description.";
      info.desc = "#### Setting '#{par_descriptor.name}'\n\n- #{schemaDescription(par_descriptor.schema)}";
    }
    rv.push(info);
  }
  return rv;
}

function generateParameterDocs(parameter_info) {
  var parameters = [
    "  @param {DockerAPIClient} [api_client] API client as obtained by [../service::run]"
  ];
  if (parameter_info.length) {
    parameters.push("  @param {Object} [settings] API call parameters");
    parameter_info .. @each {
      |par_info|
      parameters.push(par_info.docs);
    }
  }
  return parameters.join("\n");
}
